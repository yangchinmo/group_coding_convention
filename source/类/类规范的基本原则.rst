类规范的基本原则
--------------------------

抽象性
~~~~~~

类是建立在语句、子程序等之上的更高层次的抽象[@martinDaiMaZheng2010]，借助类我们可以完成更好的抽象，这种抽象代表我们可以在一定层次上去考虑现实问题，而不应该被底层的具体实现所困扰，体现在具体的编程过程中就是：创建出一个类以后，类的抽象性使其分离为“接口”和“实现”两部分——“接口”是类和外部程序交互的部分（一般是一堆方法的集合），而“实现”则是我们在写好就无需再多去考虑的细节。

其抽象性应该能做到以下几点：

-  一致且层次一致的抽象，每一个类只专注于实现一种而不是多种抽象数据类型。
-  提供成对的服务，有开始，就有收尾。
-  理解所实现的是哪种抽象，不要把不必要的包含进来。
-  没有很多不相关的信息被使用，如果有需要考虑将这一部分拆成别的类
-  足够短小，可以用一句话描述出来

封装性
~~~~~~

封装是对细节的隐藏，是迫使我们不能看到背后的细节或实现过程，封装和抽象也有紧密的联系，对于好的类，抽象性和封装性是同时兼具的。从调用者或者使用者的视角来看，如果封装得好，他应该对接口背后的实现细节一无所知，也不会试图去调用背后的数据或实现过程来完成某个过程。

-  封装不好而暴露出来的成分将破坏抽象的一致性，要尽可能限制其可访问性
-  不暴露成员数据
-  隐藏实现细节，不要将其放入接口
-  使用类时没有做任何假设
-  语法和语义都要做到封装：语法封装只是用一些关键字或者编程语言的限定方式去隐藏细节，而语义的封装性则是在使用类时几乎不需要去查看类的内部实现，只做针对接口的编程，

凝练
~~~~

类包含了数据和方法，但并不是说包含得越多越好，出现这种情况可能就反映出了抽象得不够好的问题。好的类应该是足够短小，它所负责的功能足够集中和单一，而不是那种无所不能的类

同时，类中的成分要尽可能得少，它对外界的调用也应该尽可能地少，因为包含或调用的子程序越多越容易出错。数据成员超过7个时应该保持警惕，考虑是不是需要分解

尽量使用包含的关系而不是继承，因为继承会增加代码的复杂度。

变量规范的基本原则
------------------

缩小变量的作用域
~~~~~~~~~~~~~~~~

作用域形容一个变量的可见的程度，体现了它在多大的范围内起作用，可以从跨度和存活时间两个指标去衡量：

-  跨度形容的是引用变量的集中程度
-  存活时间丈量的是代码的第一次引用到最后一次引用跨过的代码篇幅或语句数量

尽可能缩小变量的作用域，有利于降低出错率，方便使用者查阅代码、追溯变量和管理代码，增强可读性，方便后期划分为新的独立子程序具体的实施可遵循以下几点：

-  遵循就近原则：变量声明的同时初始化，用到变量的时候再去考虑初始化和赋值，尽量是在靠近第一次使用变量的地方。
-  相关语句成组，尤其是用到同一个变量的多个语句。相关的语句还可以提取成单独的子程序以进一步减小变量的作用域
-  尽量局部化，少用全局变量

变量被赋具体值时间点越晚越好
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

将变量和值绑定在一起的时间点越晚，程序的灵活性就越高，一旦这里的值有变化，就不用在程序中多处修改类似的地方，而只需要修改数据的来源即可，但过度的灵活性会使程序更加复杂。

技巧：使用具名常量而不是某个数值。

为变量指定单一用途
~~~~~~~~~~~~~~~~~~

变量和用途之间秉持一对一的原则：在一个程序中不要让同一个名字的变量同时负责多个功能，这样可能会使没有关联的两段程序看似产生了“关联”，降低了可读性，尝试通过让变量的名称含义更加具体，更加接近要描述的事物。反过来，也要注意尽可能使用到所有已声明的变量，不要声明了但不使用。

避免让变量有隐含的含义，例如用-1表示错误，这是用整型数据去代表布尔型数据，多出的这一类信息用另一个变量去表示。

变量的命名完全且准确地描述代表的事物
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

变量名包含三类信息：

-  变量的内容：表示什么
-  数据的类型：具名常量，简单变量等
-  变量的作用域：全局、类内部等

好的变量名能够清楚地表示出上边三类信息，读变量名就知道它所表示的是什么，而不是要干什么。避免
``x``\ 、\ ``y``\ 、\ ``current``
这种表述不清变量具体代表的是什么的名称，这样做不利于读懂变量的含义，如果一段代码需要让人去猜测含义的时候，有可能就是变量的命名出了问题。

对于不同类型的变量，总体上仍遵循好的变量名要完全且准确地描述出该变量代表的事物这一原则：

-  循环变量：一旦在循环外使用到，就不要命名成i、j、k等
-  状态变量：最好表示出什么的状态，而不是只用“状态”（flag）这种，同样状态后边对应的具体值也可以用具名常量或者枚举以表达出更清晰的含义
-  临时变量：要尽可能弄懂它的具体含义，不要用一个“临时”（\ ``temp``\ ）含糊过去
-  布尔变量：使用典型的诸如done、error、found、success、ok等这种本身就包含是否含义的名字，不要加否定词

采取一定的命名规则对不同类型的数据或程序给出区分，例如大小写，前缀后缀等，根据课题组所使用的语言，具体可参考后续2.2节Python命名规范。以下是列出的几个需要区分的点：

-  变量名和子程序名作出区分
-  区分类和对象
-  区分出全局变量
-  区分出成员变量
-  区分出类型声明
-  区分出具名常量
-  区分出枚举
-  格式化：分隔符或大小写

变量名中的计算值限定词放在后边：把最大、最小、总和、平均这些词统一放在变量名字的后边，将有含义、比较重要的部分放在前边。

如涉及到对仗词，使用约定好的、易理解的、保持一致的一组相反词：如
``open/close``\ 、\ ``min/max``\ 、\ ``old/new`` 等。

变量名的长度
~~~~~~~~~~~~

变量命名的最佳长度在9～15个字符。但这不是很强硬的规定，只是需要注意当有很多变量名都不太符合这个长度时，有可能需要重新检查一下这些变量的名称是不是表示出了清晰的含义，或者过长导致不易读。合理的变量名长度是规范清晰的变量命名的结果。

变量的长度和作用域呈正相关。比较长的名字适合那些用的很少的变量或者全局变量，而那些很短的名字所代表的变量的作用域很小，例如循环变量
``i``\ 。
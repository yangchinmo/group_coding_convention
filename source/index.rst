.. convention documentation master file, created by
   sphinx-quickstart on Sat Feb 22 10:38:51 2025.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

课题组编程规范
========================

在项目或者课题中经常会用到编程技能，用于解决一些特定的问题或者帮助实现具体的想法。程序或软件的构建往往并不只是单人活动，程序也不是写完就可以不用回顾，做好代码的维护、管理、与他人协作等和写代码本身一样重要。高可读性、易维护性、低出错率、方便与他人的合作等是好代码的必备条件。

从程序构建的角度来讲，一个整体架构上的平衡将使得复杂的程序更具秩序，复杂整体中的每个细节都能在这个统一的框架下发挥作用。统一的规则减少了因为不同部分采取了不同的编程风格而产生的混乱与割裂。同时要明确，写代码首先写给人看，其次才是机器。

但是由于每个人学习的路线不尽相同，同时每个人在初期都形成了自己的一套习惯，这给代码的后期维护和管理，组内成员的交流、构建可重复使用的程序等造成了一定的困难。因此，为解决上述问题，有必要根据软件开发实践方面的资料 [Anaya2022]_ [Martin2010]_ [McConnell2006]_ [Rossum2013]_
、组内的编程风格及相关的专业知识编写出一套约束规范。

课题组的开发重点在后端，如模型的开发，底层逻辑的实现，算法的实现等。实际上代码的规范约定是一个比较通用的概念，对于代码开发的具体环节和部分并没有十分清晰的划分，重点是建立规范，而不是深究细节。而前端后端的主要区分在于使用的编程语言不同，对于课题组所使用的Python，本文也给出了相关的规范与要求。本文所介绍的大多数代码规范可大致分为基本原则和具体实施两部分；同时按照编程活动可分为以下几个方面：

.. toctree::
   :maxdepth: 3
   :caption: 目录

   变量/index
   类/index
   子程序/index
   格式布局/index
   注释/index
   参考资料



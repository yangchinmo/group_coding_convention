注释规范的基本原则
------------------

可维护性
~~~~~~~~

有些注释风格只是好看，但是经不起修改，一旦有增删，可能会花大量额外的时间在调整符号等无用的工作上边。不能使用这种风格的注释影响后期的维护

不推荐在不必要的地方作行尾注释同样是出于可维护性这一点，注释空间过小很容易导致注释溢出到第二行。

清晰有效
~~~~~~~~

写代码的时候就该考虑到后续工作的方便和与他人的协作，而不是用注释提醒工作中存在疏漏，然后把剩下的烂摊子交给其他人。也不要在代码中写无关的注释。

缩进和注释所在层级的代码保持一致，否则会破坏原有的逻辑结构。每行注释用至少一个空行分割，便于读者从注释中获得对代码的总体认知

避免无效注释：太多的注释不是好事儿，有可能这里面有许多注释并不有效。通过统计数据给出的最佳注释量是每十行语句一条，但这不能作为严格执行的标准，应以注释的质量为重。

不使用简写或缩略语。

PEP-8中要求注释应该是和正常的英文写作一样，如注释使用完整的句子，块注释符合正常的段落规范，句子首字母大写，正常的标点符号等[@PEP8Python]。另外，Python中的文档字符串有一定的格式要求，参考4.2节类的一般编写顺序中给出的示例，

问题导向
~~~~~~~~

因为如果代码本身的表达能力足够的话，有许多信息是不需要在注释里重复的，例如好的变量命名，或者是提高抽象层次，加入新的函数或类等。因此注释应该本着解释要解决的问题，使用概述性的解释而不是重复代码所做的事情。好的注释应该是表示出代码的意图而不是操作过程，揭示“为什么做”而不是“怎么做”，使用注释的最佳目的应该是表达出代码本身没有表示出的那些信息。

另外，如果有些做法违背常规，或者是代码中潜在的错误、不特意指出就难以发现的一些点，也是可以用注释指出的。

在Python中，推荐把部分注释的信息放在文档字符串和注解中。

参数注释
~~~~~~~~

正如对代码段的注释强调问题和意图等代码表达不出的信息 一样，数据声明的注释应表达出变量名表达不出的信息。

-  数值单位（或者把单位写进变量名）
-  数值的允许范围
-  非数字量的编码含义（1代表开，0代表关）
-  输入数据的限制
-  如果某条注释和变量名有关，应该在注释中写出完整变量名，这样在修改变量名时方便通过查找维护注释
-  全局数据（最好用变量名规范表示全局数据）

类和子程序要标注出的信息
~~~~~~~~~~~~~~~~~~~~~~~~

由于类和子程序是经过抽象后的一个整体，其中包含多部分的信息，可以按照不同部分进行注释：

-  设计方法：一两句话概述子程序或类。Python中在文档字符串的首行进行说明
-  局限性、接口假设等在使用时可能想不到的或其他暗含的信息。Python中可以在文档字符串的后续行进行说明

   -  注释接口假设
   -  子程序的局限性
   -  子程序的全局效果：对全局数据的修改要说明清楚
   -  所使用算法的来源：标记参考出处

-  数据或参数：声明参数处作有关参数的注释，并适当地分出输入和输出，详见6.1.4节参数注释。Python中使用注解的方式进行说明
-  程序主体或语句组的概括性注释按需给出，特殊点的注释按需给出

使用规范详见4.2节Python类的编写要点和一般编写顺序和6.2节文档字符串和注解。

另外，类接口的注释强调抽象性和封装性，在接口处的注释应该让人不用看实现细节就能明白类如何使用，能拿来直接用，同时不能透漏出实现细节的有关信息，仅写公开使用时需要知道的信息。

文件要标注出的信息
~~~~~~~~~~~~~~~~~~

文件的注释是更高层次的注释，大致可有以下内容：

-  文件的意图和内容（必需）
-  开发者的联系信息
-  版本控制标记
-  法律通告

子程序规范的基本原则
------------------

子程序的命名
~~~~~~~~~~~

子程序的命名要清晰表达做了什么描述出子程序做的所有事情，而不要只谈其一避开其二，避免笼统、模糊的表达，含义要具体、准确、尽量没有歧义。如果包含的操作太多，或者本身所做的事情就模糊不清，就难以做到在完整清晰地描述子程序的作用的前提下控制住名字的长度，这是子程序本身设计的问题，应该着手程序的重新设计和组织，而不是牺牲子程序名字良好的描述性来应付过去。

另外，不使用数字，数字表达不出子程序的作用。

对于不同类型的子程序，其特点和作用也要在命名上有所体现：

- 函数的命名要对返回值有所描述
- 过程则是强调动词和宾语（面向对象语言中无需加宾语，因为已经在对象的调用语句中体现，再加宾语会重复）

子程序的长度问题
~~~~~~~~~~~~~~

对于过长（超过200行）的子程序保持谨慎，因为统计数据表明超过200行的子程序容易出错，成本偏高，可读性也不强。但是更重要的是把关注点放在影响子程序长短的那些因素上，如内聚性、嵌套层次、变量的数量、注释数量等，而不要刻意限制子程序的长度

子程序命名的合适长度与变量的命名长度类似——9～15个字符。由于通常来讲子程序比一个变量要复杂，因此相应项命名长度可能也会长一点，但总体不脱离“子程序命名应以清晰表达为主”这一大前提。

子程序的参数的顺序和数量问题
~~~~~~~~~~~~~~~~~~~~~~~~

子程序的参数要考虑既定的顺序。按照按照输入-修改-输出的顺序排列参数，这样和子程序内部所包含的操作能有所对应，注意如果多个子程序使用类似的参数，则让它们的顺序保持一致以便记忆，如果有状态或出错变量（不是程序的主要功能），应该放在最后边。另外，如果认为输入、修改、输出参数的区分比较重要，可以考虑在它们的命名中加入相应的前缀，当然前提是遵循统一的命名规则。

子程序参数的数量限制在约7个以内。太多的参数记忆和理解比较困难，同样这也暗含了设计问题：需要传递太多的参数也可能是因为子程序之间的耦合太强，应考虑重新设计或组织。

子程序的接口和参数
~~~~~~~~~~~~~~~~

在接口中对参数的前提或某些约束加以说明，当参数有某些特征，对这些假定要予以说明，在Python中，使用合适的文档字符串和注解进行说明，无需另加注释。例如：

- 输入/修改/输出
- 参数的单位
- 状态代码或错误值的含义（0、1代表什么？）
- 所能接受的数值范围
- 某些不合理的特定数值

输入参数不能作为子程序中使用的工作变量，传入子程序的参数是不能在子程序中随意修改的，这样做会导致实际代表的含义和最初的变量名称不相匹配，会导致不必要的麻烦。应引入一个局部变量，代替其完成相关操作

实际参数和形式参数做到相匹配：

- 名称上，形式参数和实际参数相互呼应，在名字上就能看出它们是相互对应的
- 类型上，形式参数和实际参数保持一致，整型对整形、浮点对浮点
